{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 4,
  "numPassedTests": 15,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 4,
  "numTotalTests": 15,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1741146548035,
  "success": false,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1741146549435,
        "runtime": 923,
        "slow": false,
        "start": 1741146548512
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "D:\\code\\Test Homework\\Lab-1_CS262\\test\\sum.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "sum function"
          ],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sum function should add two positive numbers correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add two positive numbers correctly"
        },
        {
          "ancestorTitles": [
            "sum function"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sum function should add two negative numbers correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add two negative numbers correctly"
        },
        {
          "ancestorTitles": [
            "sum function"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "sum function should add a positive and a negative number correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add a positive and a negative number correctly"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1741146549526,
        "runtime": 1018,
        "slow": false,
        "start": 1741146548508
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "D:\\code\\Test Homework\\Lab-1_CS262\\test\\average.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "average function tests"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "average function tests should return average = 0 and total.valid = 0 for non-array input",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return average = 0 and total.valid = 0 for non-array input"
        },
        {
          "ancestorTitles": [
            "average function tests"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "average function tests should return average = -999 and total.valid = 0 if array contains only -999",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return average = -999 and total.valid = 0 if array contains only -999"
        },
        {
          "ancestorTitles": [
            "average function tests"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "average function tests should return average = -999 and total.valid = 0 if values are below min",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return average = -999 and total.valid = 0 if values are below min"
        },
        {
          "ancestorTitles": [
            "average function tests"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "average function tests should return average = -999 and total.valid = 0 if values are above max",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return average = -999 and total.valid = 0 if values are above max"
        },
        {
          "ancestorTitles": [
            "average function tests"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "average function tests should calculate the correct average for valid inputs within [min, max]",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate the correct average for valid inputs within [min, max]"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1741146549581,
        "runtime": 1042,
        "slow": false,
        "start": 1741146548539
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "D:\\code\\Test Homework\\Lab-1_CS262\\test\\beforeAfter.test.js",
      "testResults": [
        {
          "ancestorTitles": [],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": ""
        },
        {
          "ancestorTitles": [
            "Scoped / Nested block"
          ],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Scoped / Nested block",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": ""
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1741146549558,
        "runtime": 995,
        "slow": false,
        "start": 1741146548563
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "D:\\code\\Test Homework\\Lab-1_CS262\\test\\arrayMatchers.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "Array Matcher Examples"
          ],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Array Matcher Examples should check that two arrays are equal",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should check that two arrays are equal"
        },
        {
          "ancestorTitles": [
            "Array Matcher Examples"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Array Matcher Examples should check that an array contains a specific element",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should check that an array contains a specific element"
        },
        {
          "ancestorTitles": [
            "Array Matcher Examples"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Array Matcher Examples should check that the array has the correct length",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should check that the array has the correct length"
        },
        {
          "ancestorTitles": [
            "Array Matcher Examples"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Array Matcher Examples should check that an array contains a subset of elements",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should check that an array contains a subset of elements"
        },
        {
          "ancestorTitles": [
            "Array Matcher Examples"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Array Matcher Examples should verify the type of each element in an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should verify the type of each element in an array"
        }
      ],
      "failureMessage": null
    }
  ],
  "wasInterrupted": false
}